https://github.com/Abdullah-Jehani/VueStart
props => While props depends on a specific parent-child relationship, the Provide/Inject API will inject data into the parent-child tree for any descendant to consume
Note : 
when injecting to the child component, we cannot display it in the parent component 
so , we first set the inject value to value in the data() and call it using this. 

example : 

<template>
<h2> {{username}} </h2>
</template>
<script>
data() {
    return {
        username: 'Abdullah,
    }
}
provide () {       // to be givn to the child component.
    return {
    name : this.username 
    }
} { 
}
</script>



to make communication between child and parent , we use emmits
Example => our child component (popup) 
first , in script block we declare the emmits: ['close'] , 
second , in template block we assign it to an HTML tag <button @click="emit('close')">Close Me </button>
third, in the parent component we make use of it <popup @close="condation" />
in last line , we used our custom event thatr we have created 
we can also pass data with the emit event like => <button @click="$emit('close')">Close </button> 
Emit Validation 
emits : {
    close(name) {
        
    }
}

when we want to use v-model with component 

<template>
    <input type="text" 
    :value="modelValue"
    @input="$emit('update:modelValue' , $event.target.value)"
    >
</template>
<script>
export default {
    name: 'InputComponent',
    props: { // its necesserry to identify this prop
        modelValue: String , 
    }
}

### Slots => 
are simmilar to props , but the difference is the slots give you more freedom tob pass like HTML structure or image 
 while the props only allow to pass text 

 slot Props 

    <div>
        <h3 v-for="name in names" :key="name.firstName">
       <slot :firstName="name.firstName" :lastName="name.lastName"></slot>
        </h3>
    </div>

    <NameList>
  <template v-slot:default="slotProps">
    {{slotProps.firstName}} {{slotProps.lastName}} 
  </template>
</NameList>